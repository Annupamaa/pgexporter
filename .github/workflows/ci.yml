name: CI

on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main

  workflow_dispatch:

jobs:
  build-ubuntu:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        compiler: [gcc, clang]
        build_type: [Debug, Release]
      fail-fast: false


    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt update && sudo apt install -y \
            git gcc cmake make libev-dev openssl libssl-dev systemd libsystemd-dev \
            libyaml-dev python3-docutils libatomic1 zlib1g zlib1g-dev \
            libzstd-dev liblz4-dev bzip2 libbz2-dev pandoc texlive-base \
            texlive-latex-recommended texlive-fonts-recommended texlive-extra-utils \
            texlive-xetex texlive-fonts-extra wget graphviz doxygen
      - name: Install Eisvogel template for Pandoc
        run: |
              wget https://github.com/Wandmalfarbe/pandoc-latex-template/releases/download/2.4.2/Eisvogel-2.4.2.tar.gz
              tar -xzf Eisvogel-2.4.2.tar.gz
              mkdir -p ~/.local/share/pandoc/templates
              mv eisvogel.latex ~/.local/share/pandoc/templates/
      - name: Build Project
        run: |
              mkdir build
              cd build
              if [ "${{ matrix.compiler }}" = "gcc" ]; then
                export CC=/usr/bin/gcc
              else
                export CC=/usr/bin/clang
              fi
                   
              cmake -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} ..
              make -j$(nproc)
        working-directory: /home/runner/work/pgexporter/pgexporter/
      
      - name: Upload Generated Documentation Artifact
        if: matrix.compiler == 'gcc' && matrix.build_type == 'Release'
        uses: actions/upload-artifact@v4
        with:
          name: generated-docs
          path: /home/runner/work/pgexporter/pgexporter/build/doc
          retention-days: 90


  build-macos:
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v3

      - name: Detect Homebrew prefix
        id: brew-prefix
        run: |
          echo "HOMEBREW_PREFIX=$(brew --prefix)" >> $GITHUB_ENV
          echo "ARCH=$(uname -m)" >> $GITHUB_ENV
          if [ "$(uname -m)" = "arm64" ]; then
            echo "Using Apple Silicon (M1/M2) configuration with Homebrew at /opt/homebrew"
          else
            echo "Using Intel configuration with Homebrew at /usr/local"
          fi

      - name: Install dependencies
        run: |
          brew update
          brew upgrade
          brew install libev zstd lz4 bzip2 graphviz doxygen libyaml cmake docutils
          brew link --force bzip2
          brew link --force zstd
          brew link --force lz4

      - name: Debug Build
        run: |
          mkdir -p build
          cd build
          export CC=/usr/bin/clang

          # Set library paths based on architecture
          cmake -DCMAKE_BUILD_TYPE=Debug .. \
            -DCMAKE_PREFIX_PATH="$HOMEBREW_PREFIX" \
            -DCMAKE_INCLUDE_PATH="$HOMEBREW_PREFIX/include" \
            -DCMAKE_LIBRARY_PATH="$HOMEBREW_PREFIX/lib"

          make

      - name: Release Build
        run: |
          rm -rf build
          mkdir -p build
          cd build
          export CC=/usr/bin/clang

          # Set library paths based on architecture
          cmake -DCMAKE_BUILD_TYPE=Release .. \
            -DCMAKE_C_FLAGS='-D_DARWIN_C_SOURCE' \
            -DCMAKE_PREFIX_PATH="$HOMEBREW_PREFIX" \
            -DCMAKE_INCLUDE_PATH="$HOMEBREW_PREFIX/include" \
            -DCMAKE_LIBRARY_PATH="$HOMEBREW_PREFIX/lib"

          make
